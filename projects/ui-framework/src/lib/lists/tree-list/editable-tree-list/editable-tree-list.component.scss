@import '../../../style/common-imports';
@import '../../../style/icons.mixin';

$betl-max-depth: 10;
$betl-item-height: 32px;
$betl-item-indent: 20px;
$betl-bgcolor: white;
$betl-bg-line-width: 1px;
$betl-max-items: 15;

:host {
  display: flex;
  flex-direction: column;
  max-width: 100%;
  min-width: 0;
  min-height: 0;
  flex-grow: 1;
  text-align: left;

  border-radius: $border-radius;
  padding: 12px;

  &[data-embedded='false'] {
    background-color: $betl-bgcolor;
    border: 1px solid $border-color;
    box-shadow: 0 2px 3px 0 $boxShadowColor;
  }
}

// List

.betl-list {
  list-style: none;
  padding: 0;
  margin: 0;

  will-change: scroll-position, transform, min-height;
  display: flex;
  flex-direction: column;
  min-height: 0;
  height: var(--list-min-height, auto);
  max-height: calc(
    var(--list-max-items, #{$betl-max-items}) * #{$betl-item-height}
  );
  overflow: auto;
}

.betl-item {
  min-width: var(--list-min-width, 0);
}

.betl-item.filler {
  pointer-events: none;
  flex-grow: 1;
  min-height: var(--list-filler-height, 0);

  &:only-child {
    min-height: 20px;
  }
}

.betl-list-footer {
  pointer-events: none;
}
.betl-list-add-item {
  pointer-events: all;
}

// BG lines & identation

.betl-item {
  background-image: repeating-linear-gradient(
    to right,
    transparent 0,
    transparent #{$betl-item-indent/2 - $betl-bg-line-width/2},
    $border-color #{$betl-item-indent/2 - $betl-bg-line-width/2},
    $border-color #{$betl-item-indent/2 + $betl-bg-line-width/2},
    transparent #{$betl-item-indent/2 + $betl-bg-line-width/2},
    transparent #{$betl-item-indent * 2}
  );
  background-position: left ($betl-item-indent * 2) top 0;
  background-size: 0 100%;
  background-repeat: no-repeat;
}

@for $i from 2 through $betl-max-depth {
  [data-level='#{$i}'] {
    padding-left: ($betl-item-indent * 2 * ($i - 1));
    background-size: ($betl-item-indent * 2 * ($i - 1)) 100%;
  }
}

// Layout

.betl-item-grid {
  height: $betl-item-height;
  display: grid;
  grid-template-columns: $betl-item-indent $betl-item-indent $betl-item-indent auto;
  align-items: center;
}

.betl-item-menu {
  grid-column: 1;
  grid-row: 1;
}
.betl-item-chevron {
  grid-column: 2;
  grid-row: 1;
}
.betl-item-dot {
  grid-column: 3;
  grid-row: 1;
}
.betl-item-input-wrap {
  grid-column: 4;
}

.betl-list-add-item {
  grid-column: 3;
  grid-row: 1;
}

// Item

.betl-item-elmnt {
  height: $betl-item-height;
  @include flex-align;
}

.betl-item-dot {
  &:before {
    @include pseudo;
    @include size(8px);
    background-color: $grey-700;
    border-radius: 50%;
  }
}

// Input

.betl-item-input-wrap {
  color: $body-text-color;
}

.betl-item-input {
  flex-grow: 1;
  min-width: 100px;
  height: $betl-item-height;
  line-height: $betl-item-height;
  border: 0;
  padding: 0 10px;
  color: inherit;
  background: none;
  text-overflow: ellipsis;

  &::placeholder {
    color: $grey-600;
    transition: opacity 0.2s;
  }
  &:focus::placeholder {
    opacity: 0;
    transition: none;
  }
}

// Controls

.betl-item-chevron {
  &:before {
    font-size: map-get($icon-sizes, 'large');
    color: map-get-deep($icon-colors, 'dark', color);
    @include size(map-get($icon-sizes, 'medium'));
    line-height: map-get($icon-sizes, 'medium');
    display: flex;
    justify-content: center;
  }
  &:hover:before {
    color: $grey-900;
  }
}

:host ::ng-deep {
  .collapsed .betl-item-chevron {
    @include b-icon(arrow-drop-right, $size: null, $color: false, $hover: false) {
      display: flex;
    }
  }

  .expanded .betl-item-chevron {
    @include b-icon(arrow-drop-down, $size: null, $color: false, $hover: false) {
      display: flex;
    }
  }
}

:host ::ng-deep b-icon[data-type='circular'] {
  background-color: $grey-500;

  &:hover,
  &:focus {
    background-color: darken($grey-500, 10%);
  }

  &.betl-item-menu-trigger,
  &.betl-list-add-item {
    @include size($betl-item-indent);
  }

  &.betl-list-add-item {
    .b-icon {
      &:before {
        font-weight: 600;
      }
    }
  }
}

// Menu

:host ::ng-deep .betl-item-menu {
  .menu-trigger-wrapper {
    opacity: 0;
  }

  .menu-trigger-wrapper:hover,
  &[data-menu-open='true'] .menu-trigger-wrapper {
    opacity: 1;
  }
}

:host ::ng-deep {
  .betl-item:hover .betl-item-menu {
    .menu-trigger-wrapper {
      opacity: 1;
    }
  }
}

::ng-deep {
  .cdk-overlay-container .betl-menu {
    .mat-menu-item {
      display: flex;
      padding: 0 15px;

      span {
        flex-grow: 1;
        display: flex;
        justify-content: space-between;

        &:after {
          opacity: 0.7;
        }
      }

      &.toggleCollapsed span {
        &:after {
          font-size: 90%;
          content: ' ⌘↓ ⌘↑';
        }
      }

      &.insertNewItem span {
        &:after {
          content: ' ↵';
        }
      }

      &.increaseIndent span {
        &:after {
          content: ' ⇥';
        }
      }

      &.decreaseIndent span {
        &:after {
          content: ' ⇧⇥';
        }
      }

      &.delete span {
        &:after {
          font-size: 90%;
          content: ' ⇧⌘⌫';
        }
      }
    }
  }

  .betl-del-confirm {
    left: -50%;
  }

  .cdk-overlay-connected-position-bounding-box[style*='flex-end'] {
    .betl-del-confirm {
      left: auto;
      right: -50%;
    }
  }
}

// Drag and drop

:host ::ng-deep {
  .betl-item {
    position: relative;

    &[data-drag-state='dragged'] {
      z-index: 1;
    }

    &[data-drag-state='drag-hover-below'] > .betl-item-input-wrap {
      box-shadow: inset 0 -2px 0 $border-color;
    }

    &[data-drag-state='drag-hover-above'] > .betl-item-input-wrap {
      box-shadow: inset 0 2px 0 $border-color;
    }
  }

  [cdkdrag] {
    width: 100%;
    @include position(0 0 0 0);
    pointer-events: none;
    user-select: none;

    .betl-item-input-wrap {
      padding: 0 10px;
      background: none;
    }

    &:not(.cdk-drag-placeholder) {
      .betl-item-input-wrap {
        @include text-hide;
      }
    }

    &.cdk-drag-placeholder {
      .betl-item-input-wrap {
        justify-content: flex-end;
        opacity: 0.5;
      }

      & ~ .betl-item-input-wrap {
        .betl-item-input {
          @include disabled-state;
        }
      }

      & ~ .betl-item-dot:before {
        opacity: 0.5;
      }
    }
  }

  [cdkdraghandle] {
    pointer-events: all;
    cursor: grab;
    background: none;

    &:before {
      display: none;
    }
  }

  [cdkdrag][style*='tap-highlight'],
  .cdk-drag-placeholder {
    pointer-events: all;

    &,
    [cdkdraghandle] {
      cursor: grabbing;
    }
  }

  .betl-list.cdk-drop-list-dragging {
    cursor: grabbing;

    .betl-item-elmnt,
    [cdkdrag] {
      pointer-events: none;
    }
    .betl-item-menu {
      visibility: hidden;
    }
  }
}

:host[data-dnd-disabled='true'] {
  [cdkDragHandle] {
    cursor: default;
  }
}

::ng-deep {
  .betl-item-grid.cdk-drag-preview {
    display: none;
  }
}
