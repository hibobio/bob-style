@import './functions';

@mixin pseudo {
  content: '';
  display: block;
  pointer-events: none;
}

@mixin size($w: 100%, $h: $w) {
  width: $w;
  height: $h;
}

@mixin position($pos: 0 null null 0, $p: absolute) {
  position: $p;
  top: nth($pos, 1);
  right: nth($pos, 2);
  bottom: nth($pos, 3);
  left: nth($pos, 4);
}

@function height-from-text(
  $lines,
  $font-size,
  $line-height,
  $add: 0,
  $useCssVars: false
) {
  $return: null;
  @if not $useCssVars {
    $return: $font-size * $line-height * $lines + $add;
  }
  @if $useCssVars {
    $return: unquote(
      'calc(var(--font-size) * var(--line-height) * #{$lines} + #{add-unit($add)})'
    );
  }
  @return $return;
}

@mixin line-clamp(
  $lines,
  $font-size: null,
  $line-height: null,
  $minHeight: false,
  $mod: false,
  $useCssVars: false
) {
  @if not $mod {
    @if not $useCssVars {
      line-height: $line-height;
    }
    display: -webkit-box;
    -webkit-box-orient: vertical;
    overflow: hidden;
    text-overflow: ellipsis;
  }

  max-height: height-from-text(
    $lines,
    $font-size,
    $line-height,
    $useCssVars: $useCssVars
  );

  @if $minHeight {
    @if $minHeight != 0 {
      min-height: height-from-text(
        $lines,
        $font-size,
        $line-height,
        $useCssVars
      );
    } @else {
      min-height: 0;
    }
  }

  line-clamp: $lines;
  -webkit-line-clamp: $lines;
}

@mixin text-truncate {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

@mixin text-hide {
  font-size: 0px;
  font: 0/0 a;
}

@mixin text-hyphenate {
  overflow-wrap: break-word;
  word-wrap: break-word;
  hyphens: auto;
  hyphenate-limit-before: 4;
  hyphenate-limit-after: 4;
  hyphenate-limit-lines: 2;
  hyphenate-limit-last: always;
  hyphenate-limit-zone: 8%;
  hyphenate-limit-chars: 10 4 4;
}

@mixin animate($name, $time: 0.3s, $delay: null, $iterate: 1, $dir: null) {
  animation-name: $name;
  animation-duration: $time;
  animation-iteration-count: $iterate;
  animation-delay: $delay;
  animation-direction: $dir;
  animation-fill-mode: both;
  backface-visibility: hidden;
}

@mixin breakout-underlay(
  $brdr-loc: top bottom,
  $bg-color: null,
  $brdr-width: 1px,
  $brdr-color: $grey-500,
  $shadow: false,
  $use: before,
  $mod: false,
  $add: false
) {
  @if (not $mod) and (not $add) {
    position: relative;
  }

  &:#{$use} {
    @if (not $mod) and (not $add) {
      @include pseudo;
      @include size(200%, 100%);
      @include position(0 -50% 0 -50%);
      z-index: 0;
      background-color: $bg-color;
    }

    @if ($brdr-width and $brdr-width > 0 and $brdr-color and (not $add)) {
      @each $loc in $brdr-loc {
        border-#{$loc}: $brdr-width solid $brdr-color;
      }
    } @else if ($brdr-width == 0) {
      border: 0;
    }

    @if $shadow {
      @if $shadow == 0 or $shadow == none {
        box-shadow: 0 0 0 0 transparent;
      } @else {
        box-shadow: $shadow;
      }
    }

    @content;
  }
}

@mixin disabled-state {
  opacity: 0.5;
  pointer-events: none;
  user-select: none;
  cursor: default;
  @content;
}

@mixin flex-align {
  display: flex;
  justify-content: center;
  align-items: center;
}

@mixin visually-hidden {
  clip: rect(0 0 0 0);
  height: 1px;
  width: 1px;
  padding: 0;
  margin: -1px;
  border: 0;
  outline: 0;
  overflow: hidden;
  position: absolute;
  appearance: none;
}
