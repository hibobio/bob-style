@import './functions';
@import './keyframes';

@mixin pseudo {
  content: '';
  display: block;
  pointer-events: none;
}

@mixin size($w: 100%, $h: $w) {
  @if (type-of($w) == list) {
    $h: nth($w, 2);
    $w: nth($w, 1);
  }
  width: $w;
  height: $h;
}

@mixin position($pos: 0 null null 0, $p: absolute) {
  position: $p;
  top: nth($pos, 1);
  right: nth($pos, 2);
  bottom: nth($pos, 3);
  left: nth($pos, 4);
}

@mixin line-clamp(
  $lines,
  $font-size: null,
  $line-height: null,
  $minHeight: false,
  $mod: false,
  $useCssVars: false
) {
  @if not $mod {
    @if not $useCssVars {
      line-height: $line-height;
    }
    display: -webkit-box;
    -webkit-box-orient: vertical;
    overflow: hidden;
    text-overflow: ellipsis;
  }

  max-height: height-from-text(
    $lines,
    $font-size,
    $line-height,
    $useCssVars: $useCssVars
  );

  @if $minHeight {
    @if $minHeight != 0 {
      min-height: height-from-text(
        $lines,
        $font-size,
        $line-height,
        $useCssVars
      );
    } @else {
      min-height: 0;
    }
  }

  line-clamp: $lines;
  -webkit-line-clamp: $lines;
}

@mixin text-truncate {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

@mixin text-hide {
  font-size: 0px;
  font: 0/0 a;
}

@mixin text-hyphenate {
  overflow-wrap: break-word;
  word-wrap: break-word;
  hyphens: auto;
  hyphenate-limit-before: 4;
  hyphenate-limit-after: 4;
  hyphenate-limit-lines: 2;
  hyphenate-limit-last: always;
  hyphenate-limit-zone: 8%;
  hyphenate-limit-chars: 10 4 4;
}

@mixin animate(
  $name,
  $time: 0.3s,
  $delay: null,
  $iterate: 1,
  $dir: null,
  $keyframes: false
) {
  $id: simpleUID();
  @if $keyframes {
    @include keyframes($name, $id: ('-' + $id));
    animation-name: ($name + '-' + $id);
  } @else {
    animation-name: $name;
  }
  animation-duration: $time;
  animation-iteration-count: $iterate;
  animation-delay: $delay;
  animation-direction: $dir;
  animation-fill-mode: both;
  backface-visibility: hidden;
}

@mixin breakout-underlay(
  $brdr-loc: top bottom,
  $bg-color: null,
  $brdr-width: 1px,
  $brdr-color: $grey-500,
  $shadow: false,
  $use: before,
  $mod: false,
  $add: false
) {
  @if (not $mod) and (not $add) {
    position: relative;
  }

  &:#{$use} {
    @if (not $mod) and (not $add) {
      @include pseudo;
      @include size(200%, 100%);
      @include position(0 -50% 0 -50%);
      z-index: 0;
      background-color: $bg-color;
    }

    @if ($brdr-width and $brdr-width > 0 and $brdr-color and (not $add)) {
      @each $loc in $brdr-loc {
        border-#{$loc}: $brdr-width solid $brdr-color;
      }
    } @else if ($brdr-width == 0) {
      border: 0;
    }

    @if $shadow {
      @if $shadow == 0 or $shadow == none {
        box-shadow: 0 0 0 0 transparent;
      } @else {
        box-shadow: $shadow;
      }
    }

    @content;
  }
}

@mixin disabled-state {
  opacity: 0.5;
  pointer-events: none;
  user-select: none;
  cursor: default;
  @content;
}

@mixin flex-align {
  display: flex;
  justify-content: center;
  align-items: center;
}

@mixin visually-hidden {
  clip: rect(0 0 0 0);
  height: 1px;
  width: 1px;
  padding: 0;
  margin: -1px;
  border: 0;
  outline: 0;
  overflow: hidden;
  position: absolute;
  appearance: none;
}

@mixin mask-image($img, $color: null, $align: center, $size: contain) {
  @supports not ((-webkit-mask-image: url('')) or (mask-image: url(''))) {
    background-image: $img;
    background-repeat: no-repeat;
    background-position: $align;
    background-size: $size;
  }
  @supports (-webkit-mask-image: url('')) or (mask-image: url('')) {
    background-image: none;
    background-color: $color;
    -webkit-mask-image: $img;
    -webkit-mask-repeat: no-repeat;
    -webkit-mask-position: $align;
    -webkit-mask-size: $size;
  }
}

@mixin ratioPad($ratio-or-width, $height: null, $include: null) {
  $padding: if(
    $height,
    percentage($height/$ratio-or-width),
    percentage(1 / $ratio-or-width)
  );
  @if $include {
    $padding: calc(#{$padding} - #{$include});
  }
  padding-bottom: $padding;
}

@mixin ratio($ratio-or-width, $height: null, $clear: true, $include: null) {
  &:before {
    content: '';
    float: left;
    @include ratioPad($ratio-or-width, $height, $include);
  }
  @if $clear {
    &:after {
      content: '';
      display: table;
      clear: both;
    }
  }
}

@mixin desktop-hover {
  @media (hover: hover) and (pointer: fine) {
    & {
      @content;
    }
  }
}

@mixin mobile($break: $breakpoint-device-sm) {
  @media (max-width: $break) {
    @content;
  }
}

@mixin desktop($break: $breakpoint-device-sm) {
  @media (min-width: ($break + 1px)) {
    @content;
  }
}

@mixin responsive(
  $prop: null,
  $min-width: 0,
  $max-width: 2000px,
  $min-val: 0px,
  $max-val: 300px,
  $unit: px,
  $doEdges: true
) {
  $minWidth: strip-unit($min-width);
  $maxWidth: strip-unit($max-width);

  @if $prop {
    @if $doEdges {
      #{$prop}: #{strip-unit($min-val)}px;

      @media (min-width: #{$maxWidth + 1}px) {
        #{$prop}: #{strip-unit($max-val)}px;
      }
    }

    @media (min-width: #{$minWidth}px) and (max-width: #{$maxWidth}px) {
      #{$prop}: resp-val($min-width, $max-width, $min-val, $max-val, $unit);
    }
  }
}

@mixin responsive-font(
  $min-val: 12,
  $max-val: 24,
  $min-width: $small-mobile-media-width,
  $max-width: $mobile-media-width,
  $unit: px,
  $doEdges: true
) {
  @include responsive(
    $prop: font-size,
    $min-width: $min-width,
    $max-width: $max-width,
    $min-val: $min-val,
    $max-val: $max-val,
    $unit: $unit,
    $doEdges: $doEdges
  );
}
