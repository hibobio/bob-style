@mixin pseudo {
  content: '';
  display: block;
  pointer-events: none;
}

@mixin size($w: 100%, $h: $w) {
  width: $w;
  height: $h;
}

@mixin position($pos: 0 null null 0, $p: absolute) {
  position: $p;
  top: nth($pos, 1);
  right: nth($pos, 2);
  bottom: nth($pos, 3);
  left: nth($pos, 4);
}

@function height-from-text($lines, $font-size, $line-height, $add: 0) {
  @return $font-size * $line-height * $lines + $add;
}

@mixin line-clamp(
  $lines,
  $font-size,
  $line-height,
  $minHeight: false,
  $mod: false
) {
  @if not $mod {
    line-height: $line-height;
    display: -webkit-box;
    -webkit-box-orient: vertical;
    overflow: hidden;
    text-overflow: ellipsis;
  }
  max-height: height-from-text($lines, $font-size, $line-height);
  @if $minHeight {
    @if $minHeight != 0 {
      min-height: height-from-text($lines, $font-size, $line-height);
    } @else {
      min-height: 0;
    }
  }
  line-clamp: $lines;
  -webkit-line-clamp: $lines;
}

@mixin text-truncate {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

@mixin animate($name, $time: 0.3s, $delay: null, $iterate: 1, $dir: null) {
  animation-name: $name;
  animation-duration: $time;
  animation-iteration-count: $iterate;
  animation-delay: $delay;
  animation-direction: $dir;
  animation-fill-mode: both;
  backface-visibility: hidden;
}

@mixin breakout-underlay(
  $brdr-loc: top bottom,
  $bg-color: null,
  $brdr-width: 1px,
  $brdr-color: $grey-500,
  $shadow: false,
  $use: before,
  $mod: false,
  $add: false
) {
  @if (not $mod) and (not $add) {
    position: relative;
  }

  &:#{$use} {
    @if (not $mod) and (not $add) {
      @include pseudo;
      @include size(200%, 100%);
      @include position(0 -50% 0 -50%);
      z-index: 0;
      background-color: $bg-color;
    }

    @if ($brdr-width and $brdr-width > 0 and $brdr-color and (not $add)) {
      @each $loc in $brdr-loc {
        border-#{$loc}: $brdr-width solid $brdr-color;
      }
    } @else if ($brdr-width == 0) {
      border: 0;
    }

    @if $shadow {
      @if $shadow == 0 or $shadow == none {
        box-shadow: 0 0 0 0 transparent;
      } @else {
        box-shadow: $shadow;
      }
    }

    @content;
  }
}

@mixin disabled-state {
  pointer-events: none;
  color: $grey-500;
  border-color: $grey-300;
  @content;
}

@mixin flex-align {
  display: flex;
  justify-content: center;
  align-items: center;
}

@mixin text-hide {
  font-size: 0px;
  font: 0/0 a;
}

@function map-get-deep($map, $keys...) {
  @if length($keys) == 1 {
    $keys: nth($keys, 1);
  }
  $length: length($keys);
  $get: map-get($map, nth($keys, 1));
  @if $length > 1 {
    @for $i from 2 through $length {
      @if $get != null and type-of($get) == 'map' {
        $get: map-get($get, nth($keys, $i));
        @if $get == null {
          @return null;
        }
      } @else {
        @return null;
      }
    }
  }
  @return $get;
}

@function contains($this, $that) {
  @if type-of($this) == 'string' {
    @return str-index($this, $that);
  }
  @if type-of($this) == 'list' {
    @return index($this, $that);
  }
}
