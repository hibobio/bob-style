$maxMaxLines: 6;

[data-max-lines] {
  overflow: hidden;
  text-overflow: ellipsis;
}

[data-max-lines]:not(.btt) {
  --font-size: 1em;
}

[data-max-lines='1'] {
  white-space: nowrap;
}

$selector: '';
@for $lines from 2 through $maxMaxLines {
  @if $selector != '' {
    $selector: $selector + ',';
  }
  $selector: $selector + '[data-max-lines="' + $lines + '"]';
}

$hyphenate-selector: '';
@for $lines from 2 through 3 {
  @if $hyphenate-selector != '' {
    $hyphenate-selector: $hyphenate-selector + ',';
  }
  $hyphenate-selector: $hyphenate-selector +
    '[data-max-lines="' +
    $lines +
    '"]';
}

#{$selector} {
  @supports not (-webkit-line-clamp: 2) {
    @include mask-image(
      $img:
        'linear-gradient(to right, white 0%, white 50%, rgba(255, 255, 255, 0) 80%), linear-gradient(white, white)',
      $size:
        '100% calc(var(--font-size) * var(--line-height)), 100% calc(100% - var(--font-size) * var(--line-height))',
      $align: 'center bottom, center top',
      $fallback: false
    );
  }

  @supports (-webkit-line-clamp: 2) {
    display: -webkit-box !important;
    -webkit-box-orient: vertical;
    mask-image: none;
  }
}

#{$hyphenate-selector} {
  @supports (hyphens: auto) or (-webkit-hyphens: auto) {
    @include text-hyphenate;
  }
}

@supports (-webkit-line-clamp: 2) {
  @for $lines from 2 through $maxMaxLines {
    [data-max-lines='#{$lines}'] {
      max-height: unquote(
        'calc(var(--font-size) * var(--line-height) * #{$lines})'
      );
      line-clamp: $lines;
      -webkit-line-clamp: $lines;
    }
  }
}

@for $lines from 2 through $maxMaxLines {
  [data-min-lines='#{$lines}'] {
    min-height: unquote(
      'calc(var(--font-size) * var(--line-height) * #{$lines})'
    );
  }
}
