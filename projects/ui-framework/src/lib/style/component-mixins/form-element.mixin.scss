$wrap-height: 44px;
$input-height: 42px;
$wrap-height-smaller: 36px;
$input-height-smaller: 34px;
$input-padding: 15px;
$label-height: 18px;
$label-color: $grey-800;
$label-hint-margin: 6px;
$input-border-color: $border-color;
$input-focus-border-color: $grey-700;

@mixin form-element-margins {
}

@mixin transfer-margins($from: 'b-input') {
  @include form-element-margins;

  &::ng-deep {
    #{$from} {
    }
  }
}

@mixin align-to-input {
  height: $wrap-height;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-self: flex-start;

  :host-context(.has-label) & {
    height: $wrap-height + $label-height + $label-hint-margin;
    padding-top: ($label-height + $label-hint-margin);
  }

  :host-context([data-size='smaller'].has-label) & {
    height: $wrap-height-smaller + $label-height + $label-hint-margin;
  }
}

@mixin input-border-colors(
  $selector: '&',
  $add: '',
  $error-class: '.error',
  $warn-class: '.warn'
) {
  @if $warn-class {
    #{$selector}#{$warn-class}#{$add} {
      border-color: $color-warn;
    }
  }
  @if $error-class {
    #{$selector}#{$error-class}#{$add} {
      border-color: $color-error;
    }
  }
}

@mixin input-required($selector: '&') {
  &:after {
    content: ' *';
    display: inline-block;
    margin-left: 1px;
  }
}

@mixin input-basics($height: $input-height, $padding: 0 $input-padding) {
  box-sizing: border-box;
  display: block;
  min-width: 0;
  flex-grow: 1;
  padding: $padding;
  border: 0;
  border-color: inherit;
  border-radius: inherit;
  margin: 0;
  outline: 0;
  @include b-body(
    $lineHeight: null,
    $color: $body-text-color,
    $addCssVars: false
  );
  background: transparent;
  height: $height;
  line-height: $height;
  text-overflow: ellipsis;
}

@mixin bFormElement-label($empty-rule: true) {
  box-sizing: border-box;
  display: block;
  min-height: $label-height;
  margin: 0 0 $label-hint-margin 0;
  @include b-body($color: $label-color, $addCssVars: true);

  @if $empty-rule {
    &:empty {
      display: none;
    }
  }
}

@mixin bFormElement-basics($dir: column) {
  display: flex;
  flex-direction: $dir;
  box-sizing: border-box;
  text-align: left;
  max-width: 100%;
  min-width: 0;
  user-select: none;
  @include form-element-margins;

  &[hidden] {
    display: none;
  }
}

@mixin bFormElement-wrap {
  box-sizing: border-box;
  display: flex;
  align-items: center;
  background-color: $white;
  min-height: $wrap-height;
  border: 1px solid $input-border-color;
  border-radius: $border-radius;
  transition: box-shadow 0.2s, border-color 0.2s;
  @include b-body($addCssVars: true);

  &:only-child {
    width: 100%;
  }
}

@mixin bFormElement-placeholder {
  &[data-placeholder] {
    position: relative;
  }

  &::placeholder,
  &[data-placeholder]:before {
    color: $grey-600;
    transition: opacity 0.2s;
    @include text-truncate;
    pointer-events: none;
  }

  // &:focus::placeholder,
  // &[data-placeholder]:focus:before {
  //   opacity: 0;
  // }

  &[data-placeholder]:before {
    @include size;
    @include position(0 0 0 0);
    padding: inherit;
    content: attr(data-placeholder);
  }
}

@mixin bFormElement($sel: ':host') {
  #{$sel} {
    @include bFormElement-basics;
  }

  #{$sel} ::ng-deep {
    //
    // wrap

    .bfe-wrap {
      @include bFormElement-wrap;
    }

    // input

    .bfe-input {
      @include input-basics;

      @include bFormElement-placeholder;

      &[readonly] {
        cursor: default;
      }
    }

    // label

    .bfe-label {
      @include bFormElement-label(false);
    }

    // prefix-suffix

    .bfe-prefix,
    .bfe-suffix {
      display: flex;
      align-items: center;

      &:empty:not([class*='b-icon']) {
        display: none;
      }
    }

    .has-prefix {
      .bfe-input {
        padding-left: 0;
      }
    }

    .bfe-prefix {
      padding: 0 10px 0 $input-padding;

      &:empty + .bfe-input {
        padding-left: $input-padding;
      }
    }

    .bfe-suffix {
      padding: 0 $input-padding 0 10px;
    }

    .has-suffix {
      .bfe-input {
        padding-right: 0;

        &:last-child {
          padding-right: $input-padding;
        }
      }
    }

    // states

    .bfe-wrap:focus,
    .bfe-wrap.focused,
    .focused .bfe-wrap {
      border-color: $input-focus-border-color;
      box-shadow: none;
    }
  }

  #{$sel}.has-label {
    .bfe-wrap.focused {
      .bfe-input::placeholder,
      .bfe-input [data-placeholder]:before {
        opacity: 0;
      }
    }
    .bfe-input {
      &:focus::placeholder,
      &[data-placeholder]:focus:before {
        opacity: 0;
      }
    }
  }

  #{$sel}.disabled {
    @include disabled-state;

    ::selection {
      background: transparent;
    }
  }

  #{$sel}.required ::ng-deep {
    .bfe-label {
      @include input-required;
    }
  }

  #{$sel}.readonly {
    cursor: default;
  }

  #{$sel}.readonly ::ng-deep {
    .bfe-wrap {
      background-color: $grey-100;
    }
    .bfe-wrap,
    .bfe-input {
      cursor: default;
    }
  }

  #{$sel} {
    @include input-border-colors($add: '::ng-deep .bfe-wrap');
  }

  // Options

  #{$sel}[data-size='smaller'] ::ng-deep {
    .bfe-wrap {
      min-height: $wrap-height-smaller;
    }
    .bfe-input {
      height: $input-height-smaller;
      line-height: $input-height-smaller;
    }
  }
}

@mixin clear-input-suffix($hoverClasses: null) {
  .bfe-wrap {
    cursor: text;
  }

  .input-icon {
    pointer-events: none;
    padding-left: $input-padding - 2px;
  }

  .bfe-suffix {
    cursor: default;
  }

  .clear-input {
    outline: 0;
    cursor: pointer;

    @include desktop {
      opacity: 0;
      transition: opacity 0.1s;
      transition-delay: 0.1s;
    }
  }

  $hoverSelector: '&:hover';
  @if ($hoverClasses) {
    $hoverSelector: $hoverSelector + ',' + $hoverClasses;
  }

  .bfe-wrap {
    #{$hoverSelector} {
      .clear-input {
        opacity: 1;
      }
    }
  }

  [hidden] {
    display: none;
  }
}

@mixin bfe-input-buttons {
  .bfe-buttons-wrap {
    border-left: 1px solid $input-border-color;
    background-image: linear-gradient($input-border-color, $input-border-color);
    background-size: 100% 1px;
    background-position: center;

    min-height: $input-height;
    display: flex;
    flex-direction: column;
    justify-content: center;
    min-width: 24px;

    .bfe-input-button:nth-child(1) {
      border-top-right-radius: $border-radius;
    }

    .bfe-input-button:nth-child(2) {
      border-bottom-right-radius: $border-radius;
    }
  }

  .bfe-input-button {
    background-color: transparent;
    border: 0;
    padding: 0;
    flex-grow: 1;
    width: 100%;
    font-weight: 500;
    color: $grey-600;

    &:focus {
      outline: 0;
    }

    &:before {
      height: ($input-height / 2);
      line-height: ($input-height / 2);
    }

    &.has-hover {
      &:hover,
      &:focus {
        color: $grey-700;
      }
    }

    &[disabled] {
      @include disabled-state;
    }
  }

  .focused {
    .bfe-buttons-wrap {
      border-left-color: $input-focus-border-color;
      background-image: linear-gradient(
        $input-focus-border-color,
        $input-focus-border-color
      );
    }
  }

  // Options

  :host[data-size='smaller'] ::ng-deep {
    .bfe-buttons-wrap {
      min-height: $input-height-smaller;
    }
    .bfe-input-button {
      &:before {
        height: ($input-height-smaller / 2);
        line-height: ($input-height-smaller / 2);
      }
    }
  }
}
